// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { PlaceListData, PlaceListResponses, DownloadExcelData, DownloadExcelResponses, PlaceDemoListData, PlaceDemoListResponses, PlaceViewData, PlaceViewResponses, GisControllerListData, GisControllerListResponses, LoginData, LoginResponses, SignupData, SignupResponses, RefreshData, RefreshResponses, PlaceAnalyzeData, PlaceAnalyzeResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const placeList = <ThrowOnError extends boolean = false>(options: Options<PlaceListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PlaceListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/google',
        ...options
    });
};

/**
 * Download companies in Excel
 */
export const downloadExcel = <ThrowOnError extends boolean = false>(options: Options<DownloadExcelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DownloadExcelResponses, unknown, ThrowOnError>({
        responseType: 'arraybuffer',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/google/excel',
        ...options
    });
};

export const placeDemoList = <ThrowOnError extends boolean = false>(options: Options<PlaceDemoListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PlaceDemoListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/google/demo',
        ...options
    });
};

export const placeView = <ThrowOnError extends boolean = false>(options: Options<PlaceViewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PlaceViewResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/google/{id}',
        ...options
    });
};

export const gisControllerList = <ThrowOnError extends boolean = false>(options: Options<GisControllerListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GisControllerListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/gis',
        ...options
    });
};

export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const signup = <ThrowOnError extends boolean = false>(options: Options<SignupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SignupResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/signup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const refresh = <ThrowOnError extends boolean = false>(options: Options<RefreshData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RefreshResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/refresh',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const placeAnalyze = <ThrowOnError extends boolean = false>(options: Options<PlaceAnalyzeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PlaceAnalyzeResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/huggingface',
        ...options
    });
};